worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
	server {
		listen 80;
        lua_need_request_body on;
		server_name localhost;
#		location = / {
#			default_type text/html;
#			content_by_lua_block {
#                return ngx.redirect('/test3')
#			}
#		}
		location /auth {
            rewrite ^/member(.*) /$1 break;
            proxy_pass http://nodejs:9000;
		}
		location /member {
              access_by_lua_block {
               local arg = ngx.req.get_uri_args()
                local res = ngx.location.capture(
                        "/auth", {args={token= arg.token}}
                        )
#ngx.say("uri2 : ", ngx.var.uri)
                if res.status == 200 then
                   return 
                end

                if res.status ~= 200 then
                   return ngx.exit(401)
                end
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)

              }

            rewrite ^/member/(.*) /$1 break;

            content_by_lua_block {
                local res = ngx.location.capture(ngx.var.uri)
                ngx.say(res.body)
                #ngx.exec(ngx.var.uri)
#ngx.say("uri : ", ngx.var.uri)
            }
		}
		location /inquire1 {
#            internal;
            proxy_pass http://nodedata:9000;
		}
		location /inquire2 {
#            internal;
            proxy_pass http://nodedata2:9000;
		}
#		location /member/inquire2 {
#            rewrite ^/member/(.*) /$1 break;
#            proxy_pass http://nodedata2:9000;
#		}
        
		location ~ /google {
            proxy_pass http://www.google.com;
		}
		location = /sum {
			# 只允许内部调用
			internal;

			# 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
			# 缓存服务器的操作，达到基础模块和业务逻辑分离目的
			content_by_lua_block {
			local args = ngx.req.get_uri_args()
			ngx.say(tonumber(args.a) + tonumber(args.b))
			}
		}

		location = /app/test {
			content_by_lua_block {
			local res = ngx.location.capture(
					"/sum", {args={a=3, b=8}}
					)
			ngx.say("status:", res.status, " response:", res.body)
			}
		}

		location /print_param {
           content_by_lua_block {
           local arg = ngx.req.get_uri_args()
           for k,v in pairs(arg) do
               ngx.say("[GET ] key:", k, " v:", v)
           end

           ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
           local arg = ngx.req.get_post_args()
           for k,v in pairs(arg) do
               ngx.say("[POST] key:", k, " v:", v)
           end
           }
		}

		location /print_param2 {
           content_by_lua_block {
           local arg = ngx.req.get_uri_args()
                ngx.say("a = ", arg.a)
                ngx.say("b = ", arg.b)
           for k,v in pairs(arg) do
               ngx.say("[GET ] key:", k, " v:", v)
           end
           }
		}
        location = /test3 {
           content_by_lua_block {
              ngx.say("test")
           }
        }
        location /test {
            content_by_lua_block {
                local res = ngx.location.capture(
                        '/print_param',
                        {
                            method = ngx.HTTP_POST,
                            args = ngx.encode_args({a = 1, b = '2&'}),
                            body = ngx.encode_args({c = 3, d = '4&'})
                        }
                    )
                ngx.say(res.body)
            }
        }
        location /test11 {
            content_by_lua_block {
                local data = ngx.req.get_body_data()
                ngx.say("hello ", data)
            }
        }

	}

}
